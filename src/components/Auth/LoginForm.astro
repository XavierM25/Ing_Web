---
import '../../layouts/styles/global.css';
---

<form class="space-y-5" id="loginForm">
  <div class="space-y-2">
    <label
      for="email"
      class="block text-base font-medium text-[#222] font-onest"
    >
      Email
    </label>
    <input
      type="email"
      id="loginEmail"
      name="email"
      placeholder="email@correo.com"
      class="font-inter text-sm rounded-xl w-full px-4 py-3 border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition"
    />
  </div>

  <div class="space-y-2">
    <div class="flex items-center justify-between">
      <label
        for="password"
        class="block text-base font-medium text-[#222] font-onest"
      >
        Contraseña
      </label>
      <a
        href="#"
        class="font-inter text-sm text-blue-600 hover:text-blue-400 transition duration-300"
      >
        ¿Olvidaste tu contraseña?
      </a>
    </div>
    <div class="relative">
      <input
        type="password"
        id="loginPassword"
        name="password"
        placeholder="••••••••"
        class="font-inter text-sm w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition"
      />
      <button
        type="button"
        id="toggleLoginPassword"
        class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-600 transition"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          class="w-5 h-5"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z"
          ></path>
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
        </svg>
      </button>
    </div>
  </div>

  <div class="flex items-center">
    <input
      type="checkbox"
      id="remember"
      name="remember"
      class="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
    />
    <label
      for="remember"
      class="font-onest ml-2 block text-sm text-gray-700 transition"
    >
      Recordar sesión
    </label>
  </div>

  <button
    type="submit"
    class="font-poppins w-full bg-[#222] text-white rounded-lg px-4 py-3 font-medium hover:bg-[#3d3d3d] focus:outline-none focus:ring-2 focus:ring-gray-700 focus:ring-offset-2 transition duration-300"
  >
    Acceder
  </button>
</form>

<script>
  const emailInput = document.querySelector('#loginEmail') as HTMLInputElement;
const passwordInput = document.querySelector('#loginPassword') as HTMLInputElement;
const togglePassword = document.querySelector('#toggleLoginPassword');
const form = document.getElementById('loginForm') as HTMLFormElement;
const otpModal = document.getElementById('otpModal');
const otpInputs = document.querySelectorAll<HTMLInputElement>('#otpModal input[type="text"]');
const verifyButton = document.getElementById('verifyOtpButton');
const closeOtpModal = document.getElementById('closeOtpModal');

let storedEmail = '';

// Toggle password visibility
if (togglePassword && passwordInput) {
  togglePassword.addEventListener('click', () => {
    const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
    passwordInput.setAttribute('type', type);

    const svg = togglePassword.querySelector('svg');
    if (svg) {
      if (type === 'password') {
        svg.innerHTML = `<path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z" />
          <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />`;
      } else {
        svg.innerHTML = `<path stroke-linecap="round" stroke-linejoin="round" d="M3.98 8.223A10.477 10.477 0 001.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.45 10.45 0 0112 4.5c4.756 0 8.773 3.162 10.065 7.498a10.523 10.523 0 01-4.293 5.774M6.228 6.228L3 3m3.228 3.228l3.65 3.65m7.894 7.894L21 21m-3.228-3.228l-3.65-3.65m0 0a3 3 0 10-4.243-4.243m4.242 4.242L9.88 9.88" />`;
      }
    }
  });
}

// Configure OTP inputs
otpInputs.forEach((input, index) => {
  // Handle input
  input.addEventListener('input', (e) => {
    const target = e.target as HTMLInputElement;
    
    // Allow only numbers
    target.value = target.value.replace(/[^0-9]/g, '');

    // Move to next input
    if (target.value && index < otpInputs.length - 1) {
      otpInputs[index + 1].focus();
    }
  });

  // Handle backspace
  input.addEventListener('keydown', (e) => {
    if (e.key === 'Backspace' && !input.value && index > 0) {
      otpInputs[index - 1].focus();
    }
  });

  // Handle paste
  input.addEventListener('paste', (e) => {
    e.preventDefault();
    const paste = (e.clipboardData || (window as any).clipboardData).getData('text');
    const numbers = paste.match(/\d/g);
    
    if (numbers) {
      numbers.forEach((num: string, i: number) => {
        if (i < otpInputs.length) {
          otpInputs[i].value = num;
          if (i < otpInputs.length - 1) {
            otpInputs[i + 1].focus();
          }
        }
      });
    }
  });
});

// Handle login form submission
form.addEventListener('submit', async (e) => {
  e.preventDefault();

  const loginEmail = emailInput.value.trim();
  const loginPasswordValue = passwordInput.value.trim();

  if (!loginEmail || !loginPasswordValue) {
    alert('Por favor, ingresa tanto el email como la contraseña.');
    return;
  }

  try {
    const response = await fetch('http://localhost:5000/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email: loginEmail, password: loginPasswordValue }),
    });

    const data = await response.json();

    if (response.ok) {
      storedEmail = loginEmail;
      
      const otpResponse = await fetch('http://localhost:5000/api/auth/send-otp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email: loginEmail }),
      });

      const otpData = await otpResponse.json();

      if (otpResponse.ok) {
        if (otpModal) {
          otpModal.classList.remove('hidden');
          otpInputs[0].focus();
        }
      } else {
        alert(otpData.message || 'Error al enviar OTP.');
      }
    } else {
      alert(data.message || 'Credenciales inválidas.');
    }
  } catch (error) {
    console.error('Error:', error);
    alert('Ocurrió un error. Por favor, intenta nuevamente.');
  }
});

// Handle OTP verification
verifyButton?.addEventListener('click', async () => {
  const otp = Array.from(otpInputs).map(input => input.value).join('');
  
  if (otp.length !== 6) {
    alert('Por favor, ingrese el código completo de 6 dígitos');
    return;
  }

  try {
    const response = await fetch('http://localhost:5000/api/auth/verify-otp', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: storedEmail,
        otp: parseInt(otp, 10)
      }),
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.message || 'Error al verificar OTP');
    }

    // Store token and redirect
    if (data.token) {
      localStorage.setItem('token', data.token);
      localStorage.setItem('user', JSON.stringify(data.user));
      window.location.href = '/dashboard'; // Ajusta la ruta según tu aplicación
    }

    // Close modal and clean inputs
    if (otpModal) {
      otpModal.classList.add('hidden');
      otpInputs.forEach(input => input.value = '');
    }

  } catch (error) {
    console.error('Error:', error);
    alert(error instanceof Error ? error.message : 'Error al verificar el código');
  }
});

// Handle modal close
closeOtpModal?.addEventListener('click', () => {
  if (otpModal) {
    otpModal.classList.add('hidden');
    otpInputs.forEach(input => input.value = '');
  }
});

// Remove red highlight on input correction
emailInput.addEventListener('input', () => {
  emailInput.classList.remove('border-red-500');
});

passwordInput.addEventListener('input', () => {
  passwordInput.classList.remove('border-red-500');
});

declare global {
  interface Window {
    getStoredEmail: () => string;
  }
}

window.getStoredEmail = () => storedEmail;
</script>
